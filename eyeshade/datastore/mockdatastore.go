// Code generated by MockGen. DO NOT EDIT.
// Source: ./eyeshade/datastore/datastore.go

// Package datastore is a generated GoMock package.
package datastore

import (
	context "context"
	models "github.com/brave-intl/bat-go/eyeshade/models"
	v4 "github.com/golang-migrate/migrate/v4"
	gomock "github.com/golang/mock/gomock"
	sqlx "github.com/jmoiron/sqlx"
	reflect "reflect"
	time "time"
)

// MockDatastore is a mock of Datastore interface
type MockDatastore struct {
	ctrl     *gomock.Controller
	recorder *MockDatastoreMockRecorder
}

// MockDatastoreMockRecorder is the mock recorder for MockDatastore
type MockDatastoreMockRecorder struct {
	mock *MockDatastore
}

// NewMockDatastore creates a new mock instance
func NewMockDatastore(ctrl *gomock.Controller) *MockDatastore {
	mock := &MockDatastore{ctrl: ctrl}
	mock.recorder = &MockDatastoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDatastore) EXPECT() *MockDatastoreMockRecorder {
	return m.recorder
}

// RawDB mocks base method
func (m *MockDatastore) RawDB() *sqlx.DB {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RawDB")
	ret0, _ := ret[0].(*sqlx.DB)
	return ret0
}

// RawDB indicates an expected call of RawDB
func (mr *MockDatastoreMockRecorder) RawDB() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RawDB", reflect.TypeOf((*MockDatastore)(nil).RawDB))
}

// NewMigrate mocks base method
func (m *MockDatastore) NewMigrate() (*v4.Migrate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewMigrate")
	ret0, _ := ret[0].(*v4.Migrate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewMigrate indicates an expected call of NewMigrate
func (mr *MockDatastoreMockRecorder) NewMigrate() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewMigrate", reflect.TypeOf((*MockDatastore)(nil).NewMigrate))
}

// Migrate mocks base method
func (m *MockDatastore) Migrate(arg0 ...uint) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Migrate", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Migrate indicates an expected call of Migrate
func (mr *MockDatastoreMockRecorder) Migrate(arg0 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Migrate", reflect.TypeOf((*MockDatastore)(nil).Migrate), arg0...)
}

// RollbackTxAndHandle mocks base method
func (m *MockDatastore) RollbackTxAndHandle(tx *sqlx.Tx) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RollbackTxAndHandle", tx)
	ret0, _ := ret[0].(error)
	return ret0
}

// RollbackTxAndHandle indicates an expected call of RollbackTxAndHandle
func (mr *MockDatastoreMockRecorder) RollbackTxAndHandle(tx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RollbackTxAndHandle", reflect.TypeOf((*MockDatastore)(nil).RollbackTxAndHandle), tx)
}

// RollbackTx mocks base method
func (m *MockDatastore) RollbackTx(tx *sqlx.Tx) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RollbackTx", tx)
}

// RollbackTx indicates an expected call of RollbackTx
func (mr *MockDatastoreMockRecorder) RollbackTx(tx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RollbackTx", reflect.TypeOf((*MockDatastore)(nil).RollbackTx), tx)
}

// ResolveConnection mocks base method
func (m *MockDatastore) ResolveConnection(ctx context.Context) (context.Context, *sqlx.Tx, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResolveConnection", ctx)
	ret0, _ := ret[0].(context.Context)
	ret1, _ := ret[1].(*sqlx.Tx)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ResolveConnection indicates an expected call of ResolveConnection
func (mr *MockDatastoreMockRecorder) ResolveConnection(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResolveConnection", reflect.TypeOf((*MockDatastore)(nil).ResolveConnection), ctx)
}

// WithTx mocks base method
func (m *MockDatastore) WithTx(ctx context.Context) (context.Context, *sqlx.Tx, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithTx", ctx)
	ret0, _ := ret[0].(context.Context)
	ret1, _ := ret[1].(*sqlx.Tx)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// WithTx indicates an expected call of WithTx
func (mr *MockDatastoreMockRecorder) WithTx(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithTx", reflect.TypeOf((*MockDatastore)(nil).WithTx), ctx)
}

// Rollback mocks base method
func (m *MockDatastore) Rollback(ctx context.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Rollback", ctx)
}

// Rollback indicates an expected call of Rollback
func (mr *MockDatastoreMockRecorder) Rollback(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Rollback", reflect.TypeOf((*MockDatastore)(nil).Rollback), ctx)
}

// Commit mocks base method
func (m *MockDatastore) Commit(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Commit", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Commit indicates an expected call of Commit
func (mr *MockDatastoreMockRecorder) Commit(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Commit", reflect.TypeOf((*MockDatastore)(nil).Commit), ctx)
}

// GetAccountEarnings mocks base method
func (m *MockDatastore) GetAccountEarnings(ctx context.Context, options models.AccountEarningsOptions) (*[]models.AccountEarnings, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccountEarnings", ctx, options)
	ret0, _ := ret[0].(*[]models.AccountEarnings)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccountEarnings indicates an expected call of GetAccountEarnings
func (mr *MockDatastoreMockRecorder) GetAccountEarnings(ctx, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountEarnings", reflect.TypeOf((*MockDatastore)(nil).GetAccountEarnings), ctx, options)
}

// GetAccountSettlementEarnings mocks base method
func (m *MockDatastore) GetAccountSettlementEarnings(ctx context.Context, options models.AccountSettlementEarningsOptions) (*[]models.AccountSettlementEarnings, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccountSettlementEarnings", ctx, options)
	ret0, _ := ret[0].(*[]models.AccountSettlementEarnings)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccountSettlementEarnings indicates an expected call of GetAccountSettlementEarnings
func (mr *MockDatastoreMockRecorder) GetAccountSettlementEarnings(ctx, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountSettlementEarnings", reflect.TypeOf((*MockDatastore)(nil).GetAccountSettlementEarnings), ctx, options)
}

// GetBalances mocks base method
func (m *MockDatastore) GetBalances(ctx context.Context, accountIDs []string) (*[]models.Balance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBalances", ctx, accountIDs)
	ret0, _ := ret[0].(*[]models.Balance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBalances indicates an expected call of GetBalances
func (mr *MockDatastoreMockRecorder) GetBalances(ctx, accountIDs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBalances", reflect.TypeOf((*MockDatastore)(nil).GetBalances), ctx, accountIDs)
}

// GetPending mocks base method
func (m *MockDatastore) GetPending(ctx context.Context, accountIDs []string) (*[]models.PendingTransaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPending", ctx, accountIDs)
	ret0, _ := ret[0].(*[]models.PendingTransaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPending indicates an expected call of GetPending
func (mr *MockDatastoreMockRecorder) GetPending(ctx, accountIDs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPending", reflect.TypeOf((*MockDatastore)(nil).GetPending), ctx, accountIDs)
}

// GetTransactions mocks base method
func (m *MockDatastore) GetTransactions(ctx context.Context, constraints ...map[string]string) (*[]models.Transaction, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range constraints {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetTransactions", varargs...)
	ret0, _ := ret[0].(*[]models.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransactions indicates an expected call of GetTransactions
func (mr *MockDatastoreMockRecorder) GetTransactions(ctx interface{}, constraints ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, constraints...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransactions", reflect.TypeOf((*MockDatastore)(nil).GetTransactions), varargs...)
}

// GetTransactionsByAccount mocks base method
func (m *MockDatastore) GetTransactionsByAccount(ctx context.Context, accountID string, txTypes []string) (*[]models.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransactionsByAccount", ctx, accountID, txTypes)
	ret0, _ := ret[0].(*[]models.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransactionsByAccount indicates an expected call of GetTransactionsByAccount
func (mr *MockDatastoreMockRecorder) GetTransactionsByAccount(ctx, accountID, txTypes interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransactionsByAccount", reflect.TypeOf((*MockDatastore)(nil).GetTransactionsByAccount), ctx, accountID, txTypes)
}

// InsertConvertableTransactions mocks base method
func (m *MockDatastore) InsertConvertableTransactions(ctx context.Context, txs []models.ConvertableTransaction) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertConvertableTransactions", ctx, txs)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertConvertableTransactions indicates an expected call of InsertConvertableTransactions
func (mr *MockDatastoreMockRecorder) InsertConvertableTransactions(ctx, txs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertConvertableTransactions", reflect.TypeOf((*MockDatastore)(nil).InsertConvertableTransactions), ctx, txs)
}

// InsertTransactions mocks base method
func (m *MockDatastore) InsertTransactions(ctx context.Context, txs *[]models.Transaction) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertTransactions", ctx, txs)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertTransactions indicates an expected call of InsertTransactions
func (mr *MockDatastoreMockRecorder) InsertTransactions(ctx, txs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertTransactions", reflect.TypeOf((*MockDatastore)(nil).InsertTransactions), ctx, txs)
}

// GetActiveReferralGroups mocks base method
func (m *MockDatastore) GetActiveReferralGroups(ctx context.Context) (*[]models.ReferralGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActiveReferralGroups", ctx)
	ret0, _ := ret[0].(*[]models.ReferralGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetActiveReferralGroups indicates an expected call of GetActiveReferralGroups
func (mr *MockDatastoreMockRecorder) GetActiveReferralGroups(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActiveReferralGroups", reflect.TypeOf((*MockDatastore)(nil).GetActiveReferralGroups), ctx)
}

// GetReferralGroupsByActiveAt mocks base method
func (m *MockDatastore) GetReferralGroupsByActiveAt(ctx context.Context, activeAt time.Time) (*[]models.ReferralGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReferralGroupsByActiveAt", ctx, activeAt)
	ret0, _ := ret[0].(*[]models.ReferralGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReferralGroupsByActiveAt indicates an expected call of GetReferralGroupsByActiveAt
func (mr *MockDatastoreMockRecorder) GetReferralGroupsByActiveAt(ctx, activeAt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReferralGroupsByActiveAt", reflect.TypeOf((*MockDatastore)(nil).GetReferralGroupsByActiveAt), ctx, activeAt)
}

// GetSettlementStats mocks base method
func (m *MockDatastore) GetSettlementStats(ctx context.Context, options models.SettlementStatOptions) (*models.SettlementStat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSettlementStats", ctx, options)
	ret0, _ := ret[0].(*models.SettlementStat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSettlementStats indicates an expected call of GetSettlementStats
func (mr *MockDatastoreMockRecorder) GetSettlementStats(ctx, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSettlementStats", reflect.TypeOf((*MockDatastore)(nil).GetSettlementStats), ctx, options)
}

// GetGrantStats mocks base method
func (m *MockDatastore) GetGrantStats(ctx context.Context, options models.GrantStatOptions) (*models.GrantStat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGrantStats", ctx, options)
	ret0, _ := ret[0].(*models.GrantStat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGrantStats indicates an expected call of GetGrantStats
func (mr *MockDatastoreMockRecorder) GetGrantStats(ctx, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGrantStats", reflect.TypeOf((*MockDatastore)(nil).GetGrantStats), ctx, options)
}

// InsertVotes mocks base method
func (m *MockDatastore) InsertVotes(ctx context.Context, votes []models.Vote) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertVotes", ctx, votes)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertVotes indicates an expected call of InsertVotes
func (mr *MockDatastoreMockRecorder) InsertVotes(ctx, votes interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertVotes", reflect.TypeOf((*MockDatastore)(nil).InsertVotes), ctx, votes)
}

// InsertSurveyors mocks base method
func (m *MockDatastore) InsertSurveyors(ctx context.Context, surveyors *[]models.Surveyor) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertSurveyors", ctx, surveyors)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertSurveyors indicates an expected call of InsertSurveyors
func (mr *MockDatastoreMockRecorder) InsertSurveyors(ctx, surveyors interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertSurveyors", reflect.TypeOf((*MockDatastore)(nil).InsertSurveyors), ctx, surveyors)
}

// InsertBallots mocks base method
func (m *MockDatastore) InsertBallots(ctx context.Context, ballots *[]models.Ballot) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertBallots", ctx, ballots)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertBallots indicates an expected call of InsertBallots
func (mr *MockDatastoreMockRecorder) InsertBallots(ctx, ballots interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertBallots", reflect.TypeOf((*MockDatastore)(nil).InsertBallots), ctx, ballots)
}

// SeedDB mocks base method
func (m *MockDatastore) SeedDB(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SeedDB", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SeedDB indicates an expected call of SeedDB
func (mr *MockDatastoreMockRecorder) SeedDB(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SeedDB", reflect.TypeOf((*MockDatastore)(nil).SeedDB), arg0)
}

// GetBallotsByID mocks base method
func (m *MockDatastore) GetBallotsByID(arg0 context.Context, arg1 ...string) (*[]models.Ballot, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetBallotsByID", varargs...)
	ret0, _ := ret[0].(*[]models.Ballot)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBallotsByID indicates an expected call of GetBallotsByID
func (mr *MockDatastoreMockRecorder) GetBallotsByID(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBallotsByID", reflect.TypeOf((*MockDatastore)(nil).GetBallotsByID), varargs...)
}

// GetTransactionsByID mocks base method
func (m *MockDatastore) GetTransactionsByID(arg0 context.Context, arg1 ...string) (*[]models.Transaction, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetTransactionsByID", varargs...)
	ret0, _ := ret[0].(*[]models.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransactionsByID indicates an expected call of GetTransactionsByID
func (mr *MockDatastoreMockRecorder) GetTransactionsByID(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransactionsByID", reflect.TypeOf((*MockDatastore)(nil).GetTransactionsByID), varargs...)
}

// GetFreezableSurveyors mocks base method
func (m *MockDatastore) GetFreezableSurveyors(arg0 context.Context, arg1 int) (*[]models.Surveyor, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFreezableSurveyors", arg0, arg1)
	ret0, _ := ret[0].(*[]models.Surveyor)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFreezableSurveyors indicates an expected call of GetFreezableSurveyors
func (mr *MockDatastoreMockRecorder) GetFreezableSurveyors(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFreezableSurveyors", reflect.TypeOf((*MockDatastore)(nil).GetFreezableSurveyors), arg0, arg1)
}

// FreezeSurveyors mocks base method
func (m *MockDatastore) FreezeSurveyors(arg0 context.Context, arg1 ...string) (*[]models.Surveyor, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FreezeSurveyors", varargs...)
	ret0, _ := ret[0].(*[]models.Surveyor)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FreezeSurveyors indicates an expected call of FreezeSurveyors
func (mr *MockDatastoreMockRecorder) FreezeSurveyors(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FreezeSurveyors", reflect.TypeOf((*MockDatastore)(nil).FreezeSurveyors), varargs...)
}

// SetVoteFees mocks base method
func (m *MockDatastore) SetVoteFees(arg0 context.Context, arg1 ...string) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SetVoteFees", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetVoteFees indicates an expected call of SetVoteFees
func (mr *MockDatastoreMockRecorder) SetVoteFees(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetVoteFees", reflect.TypeOf((*MockDatastore)(nil).SetVoteFees), varargs...)
}

// CountBallots mocks base method
func (m *MockDatastore) CountBallots(arg0 context.Context, arg1 ...string) (*[]models.Ballot, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CountBallots", varargs...)
	ret0, _ := ret[0].(*[]models.Ballot)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountBallots indicates an expected call of CountBallots
func (mr *MockDatastoreMockRecorder) CountBallots(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountBallots", reflect.TypeOf((*MockDatastore)(nil).CountBallots), varargs...)
}
